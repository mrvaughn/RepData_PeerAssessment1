setinv <- function(inverse) inv <<- inverse
getinv <- function() inv
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## The following function calculates the inverse of the special "matrix"
## created with the above function. However, it first checks to see
## if the inverse has already been calculated. If so, it gets the inverse
## from the cache and skips the computation. Otherwise, it calculates
## the inverse of the data and sets the value of the inversein the cache
## via the setmean function.
cacheSolve <- function(x, ...) {
inv <- x$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinv(inv)
inv
}
m=matrix(1:4,2,2)
makeCacheMatrix(m)
m1=makeCacheMatrix(m)
cacheSolve(m)
cacheSolve(m1)
cacheSolve(m1)
cacheSolve(m1)
rm(list=ls())
quit()
rpois(n=10)
rpois(n=10,lambda=1:20)
x = rnorm(10)
x
mean(x)
sd(x)
x = rnorm(1000)
mean(x)
sd(x)
x = rnorm(10000)
mean(x)
sd(x)
summary(x)
dnorm(x)
set.seed(1)
x = rnorm(1000)
y = rnorm(1000)
summary(x)
summary(y)
set.seed(1)
z=rnorm(1000)
summary(z)
set.seed(1)
x = rpois(100, 1)
y = rpois(100, 1)
set.seed(1)
z = rpois(100, 1)
summary(x)
summary(y)
summary(z)
x
y
z
ppois(x)
ppois(2, 2)
ppois(2, 2)
ppois(2, 2)
ppois(100, 2)
set.seed(20)
rm(x,y,z)
x = rnorm(100)
e=rnorm(100,0,2)
y = .5+2*x+e
y
x[1]
x[1]*2+5+e[1]
x[1]*2+.5+e[1]
summary(y)
rbinom(100,1,.5)
plot(x,y)
rm(x,y)
x=rbinom(100,1,.5)
y = .5+2*x+e
plot(x,y)
summary(y)
quit()
set.seed(1)
?set.seed
sample(1:10, 4)
sample(1:10, 4)
sample(1:10, 4)
set.seed(1)
sample(1:10, 4)
quit()
?svd
hilbert=function(n) {}
hilbert=function(n) {
i <- 1:n
1/outer(i - 1, i, "+")
}
hilbert
hilbert(1000)
x=hilbert(1000)
View(x)
system.time(svd(x))
system.time(
{
for (1:100) {}})
?Rprof
quit()
make.NegLogLik <-function(data, fixed=c(FALSE,FALSE)) {
params <- fixed
function(p) {
params[!fixed] <- p
mu <- params[1]
sigma <- params[2]
a <- -.5*length(data)*log(2*pi*sigma^2)
b <- -.5*sum((data-mu)^2)/(sigma^2)
-(a+b)
}
}
make.NegLogLik
rm(list=ls())
quit()
set.seed(1)
rpois(5,2)
?set.seed
?ppois
ppois(1:20)
ppois(1:20, lambda=1:20)
ppois(1, lambda=1:20)
set.seed(10)
x=rbinom(10,10,.5)
e=rnorm(10,0,20)
y=.5+2*x+e
?lm
library(datasets)
Rprof()
fit=lm(y~x+x)
Rprof(NULL)
summaryRprof()
rm(list=ls())
set.seed(1)
rpois(5,2)
quit()
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
quit()
install.packages(c("class", "codetools", "gsubfn", "httr", "MASS", "Matrix", "mgcv", "RCurl", "swirl", "xlsx", "xlsxjars", "yaml"))
q()
library(data.table)
?data.table
df = data.frame(x=c("b","b","b","a","a"),v=rnorm(5))
df
dt = data.frame(x=c("b","b","b","a","a"),v=rnorm(5))
dt
rm(dt)
dt = data.table(x=c("b","b","b","a","a"),v=rnorm(5))
dt
CARS=data.table(cars)
head(CARS)
tables()
DT<-dt
rm(dt)
DF<-df
rm(df)
DT
tables()
sapply(DT,class)
DT[2,]
DT[DT$x=="b",]
cat(try(DT["b",],silent=TRUE))
try(1)
?try
DT["b",]
DF["b",]
DF1=DF
rownames(DF)
rownames(DT)
rownames(DF1)=c("a","b","c","d","e")
DF1
DF1["b",]
setkey(DT,x)
DT
tables()
?setkey
setkey(DF1,x)
DT["b",]
DT["a",]
DT["c",]
grpsize=ceiling(1e7/26^2)
?ceiling
1e7/26^2
1e7
1e7/1e5
1e1
1e2
1e3
1e4
1e5
100000
200000
2e1
2e0
2x10^4
2*10^4
2*10^5
2*10^6
2e+06
26^2
tt=system.time(DF<-data.frame(
x=rep(LETTERS,each=26*grpsize),
y=rep(letters,each=grpsize),
v=runif(grpsize*26^2),
stringsAsFactors=FALSE)
)
tt
View(DF)
tables()
rm(DF)
rm(tt)
tt=system.time(DF<-data.frame(
+ x=rep(LETTERS,each=26*grpsize),
+ y=rep(letters,each=grpsize),
+ v=runif(grpsize*26^2),
+ stringsAsFactors=FALSE)
+ )
tt=system.time(DF<-data.frame(x=rep(LETTERS,each=26*grpsize),y=rep(letters,each=grpsize),v=runif(grpsize*26^2),stringsAsFactors=FALSE))
tt
head(DF,3)
tail(DF,3)
dim(DF)
tt2=system.time(ans1 <- DF[DF$x=="R" & DF$y=="h",])
tt2
head(ans1,3)
dim(ans1)
DT=as.data.table(DF)
system.time(setkey(DT,x,y))
ss=system.time(ans2<-DT[J("R","h")])
ss
head(ans2,3)
dim(ans2)
identical(ans1$v, ans2$v)
rm(list=ls())
q()
load("~/Downloads/body_image.RData")
plot(data$HS_GPA, data$GPA)
cor(data$HS_GPA, data$GPA, use="c")
?cor
cor(data$HS_GPA, data$GPA, use="all.obs")
cor(data$HS_GPA, data$GPA, use="complete.obs")
cor(data$HS_GPA, data$GPA, use="pairwise.complete.obs")
L=lm(data$GPA~data$HS_GPA)
abline(L)
cf=coefficients(L)
lt=paste("GPA = ", round(cf[1],2),"+",round(cf[2],2),"HS_GPA")
legend(1.7,4.3,lt)
summary(data)
tbl=table(data.frame(data$Gender,data$WtFeel))
tbl
100*tbl/rowSums(tbl)
factor(data$Seat)
data$Seat
plot(data$Seat,data$GPA)
?factor
is.factor(data$Seat)
tapply(data$GPA, data$Seat, summary)
rm(list=ls())
install.packages(c("boot", "class", "cluster", "codetools", "data.table", "DBI", "httr", "jsonlite", "KernSmooth", "MASS", "mgcv", "nlme", "quantmod", "Rcpp", "testthat"))
q()
install.packages(c("mgcv", "RCurl", "RSQLite", "sqldf"))
q()
install.packages("mgcv")
contributors()
q()
x=rnorm(100)
hist(x)
y=rnorm(100)
plot(x,y)
plot(x,y, pch=2)
plot(x,y, pch=4)
plot(x,y, pch=5)
plot(x,y, pch=6)
plot(x,y, pch=7)
plot(x,y, pch=8)
plot(x,y, pch=9)
plot(x,y, pch=10)
example(points)
q()
install.packages(c("jsonlite", "RCurl", "reshape2"))
q()
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
str(mpg)
qplot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg, color = drv)
qplot(displ, hwy, data = mpg, geom=c("point","smooth"))
qplot(displ, hwy, data = mpg, geom=c(smooth"))
""
qplot(displ, hwy, data = mpg, geom=c("smooth"))
qplot(hwy, data = mpg)
qplot(hwy, data = mpg, fill = drv)
qplot(displ, hwy, data = mpg, facets = .~drv)
qplot(displ, hwy, data = mpg, facets = .~trans)
log(2)
pm25
pot(mpg)
plot(mpg)
summary(mpg)
g<-ggplot(mpg, aes(year, hwy))
print(g)
g + geom_point()
plot(mpg,x = year, y=hwy)
plot(mpg$year, mpg$hwy)
plot(mpg$year)
hist(mpg$year)
head(mpg)
mpg[mpg$year=2004]
mpg[mpg$year==2004]
mpg[mpg$year==2008]
mpg[mpg$year==2008,]
mpg[mpg$year==2004,]
summary(mpg)
hist(mpg$displ)
plot(mpg$displ, mpg$model)
rm(g)
g=ggplot(mpg, aes(model, displ))
g+geom_point()
g+geom_point()+geom_smooth()
g+geom_point()+geom_smooth(method = "lm")
g+geom_point()+facet_grid(.~manufacturer)
xyplot()
library(lattice)
xyplot()
xyplot(model~displ, data = mpg)
p = xyplot(mode~displ, data =mpg)
p <- xyplot(mode~displ, data =mpg)
p = xyplot(mode~displ, data = mpg)
xyplot(mode~displ, data = mpg)
p <- xyplot(model~displ, data =mpg)
class(p)
library(nlme)
xyplot(weight ~ Time | Diet, BodyWeight)
summary(nlme)
nlme
?llines()
?par()
?trellis.par.set()
splom()
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, geom = "smooth")
summary(airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
g <- ggplot(movies, aes(votes, rating))
print(g)
g + geom(points)
g+geom_points()
g+geom_point()
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, smooth = "loess")
rm(list=ls())
q()
400/4
400/(1.035)^6
?graph
??graph
x=lim(1)
x=[-1000:1000]
x=(-1000:1000)
plot(x=y)
plot(x)
plot(x^2)
y=(-1000:1000)
plot(x^y)
x=(-10:10)
y=(-10:10)
plot(x^y)
library(ggplot2)
ggplot
ggplot(x^y)
?ggplot
4500000/1.05^50
4500000/1.05^50
4500000/1.07^50
x=4500000/1.07^50
x
x*1.07^5
x*1.07^1
x*1.07^2
x*1.07^3
x*1.07^4
x*1.07^5
x*1.07^6
x*1.07^7
x*1.07^8
x*1.07^9
x*1.07^10
x*1.07^11
x*1.07^12
x*1.07^13
x*1.07^14
x*1.07^15
x*1.07^16
x*1.07^17
x*1.07^18
x*1.07^19
x*1.07^20
x*1.07^30
x*1.07^40
x*1.07^50
200000*.98^5
200000*.98^6
200000*.98^7
200000*.98^6.5
200000*.98^6.6
200000*.98^6.7
200000*.98^6.65
200000*.98^6.66
200000*.98^6.67
200000*.98^6.68
200000*.98^6.69
200000*.98^6.7
200000*.98^6.6
200000*.98^6.65
200000*.98^6.64
200000*.98^6.63
200000*.98^6.62
200000*.98^6.61
200000*.98^6.612
200000*.98^6.613
200000*.98^6.614
200000*.98^6.612
200000*.98^6.611
200000*.98^6.6111
200000*.98^6.6112
200000*.98^6.6113
200000*.98^6.6114
200000*.98^6.6115
200000*.98^6.6119
200000*.98^6.612
200000*.98^6.613
200000*.98^6.610
200000*.98^6.6109
200000*.98^6.62
200000*.98^6.6
200000*.98^6.601
200000*.98^6.609
rm(list=ls())
2000^x
x=1
y=200000^x
300*.92
276/100
276/3
.88*400
.88*200
176/4
29*4
116/200
.88^4
.88^4*50
.92^3*100
480000*(1-.004)^15
4600/1.06^10
68000/.96^5
rm(list=ls())
q()
x=(-100:100)
y=x^3
plot(x,y)
y=x^2
plot(x,y)
y=x^4
plot(x,y)
y=x^5
plot(x,y)
y=x^y
plot(x,y)
y=x^(x-1)
plot(x,y)
y=ln(x)
y=log(x)
y=log(1+x)
y=3x^2-2x+5
y=3*x^2-2*x+5
plot(x,y)
y=-3*x^3+3*x^2-2*x+5
plot(x,y)
y=3*x^3+3*x^2-2*x+5
plot(x,y)
rm(list=ls())
q()
install.packages(c("class", "foreign", "MASS", "nlme", "nnet", "spatial"))
knitr( )
library(knitr)
knitr()
?knitr
?purl
q()
setwd("~/Documents/GitRepositories/Coursera/RepData_PeerAssessment1")
unzip(zipfile = "activity.zip", list = TRUE)
activity.data <- read.csv("activity.csv")
View(activity.data)
rm(list=ls())
